#!/usr/libexec/ui/cscript
version 1.1;
/*
********************************************************
This script is an op script that displays a troubleshooting summary of the most relevant information,
it's operational status and the status of major protocols and interfaces.
It's set up in modular way so that you can add/remove a template using call functions in the match /
Feel free to email me with questions or comments.
********************************************************
To run this script it must be installed in /var/db/scripts/op/ and called junos-sys-checks.slax 
The following configuration must be present:            
 `set system scripts op file junos-sys-checks.slax`   
Then Type: `op junos-sys-checks` to run it                
********************************************************
*/

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

ns func extension = "http://exslt.org/functions";
ns ztp = "http://xml.juniper.net/junos/ztp";
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";

var $SYSLOG = "external.warning";
var $TARGET-VERSIONS := {
    <device> {
        <model-name> "ex2200";
        <target-version> "12.3R12.4";
    }
    <device> {
        <model-name> "ex2300";
        <target-version> "21.4R3-S3.4";
    }
    <device> {
        <model-name> "srx220";
        <target-version> "12.3X48-D105.4";
    }
    <device> {
        <model-name> "srx320";
        <target-version> "21.4R3-S3";
    }
}
/*Collect define mode from cli or set default test mode to full */
param $mode = "full";

match /
{
    var $jnx = jcs:open();
    mvar $message = "";

    /*Get serial number on current device */
    var $serial = ztp:serial-number( $jnx );
    var $SYSLOG_TAG = " " _ $serial _ " - ";

    var $get_config = <get-configuration database="committed" inherit="inherit">;
    var $configuration = jcs:invoke($get_config);

    <op-script-results>  {
            <output> "-------------------------------------------------------------------------------------------------------";
            set $message = "                      Welcome "_ $user _ "                         Mode: "_ $mode;
            call send_message($SYSLOG_TAG, $message);
            <output> "-------------------------------------------------------------------------------------------------------";
            set $message = "         ** This is the output of the sys_check script for "_ $serial _" on " _ $product _ " ** ";
            call send_message($SYSLOG_TAG, $message);
            <output> "-------------------------------------------------------------------------------------------------------";
        if (($mode == "full") || ($mode == "base")) {
            call chassis_template($SYSLOG_TAG);
            <output> "-------------------------------------------------------------------------------------------------------";
            call system_template($SYSLOG_TAG);
            <output> "-------------------------------------------------------------------------------------------------------";
        }
        if (($mode == "full") || ($mode == "proto")) {
            call ospf_template($SYSLOG_TAG, $configuration);
            <output> "-------------------------------------------------------------------------------------------------------";
            call mpls_template($SYSLOG_TAG, $configuration);
            <output> "-------------------------------------------------------------------------------------------------------";
            call bgp_template($SYSLOG_TAG, $configuration);
            <output> "-------------------------------------------------------------------------------------------------------";
        }
        if (($mode == "full") || ($mode == "conn")) {
            if (starts-with($product,"srx")) {
                call vpn_template($SYSLOG_TAG);
                <output> "-------------------------------------------------------------------------------------------------------";
            }
            call interface_template($SYSLOG_TAG, $configuration);
            <output> "-------------------------------------------------------------------------------------------------------";
        }
    }
}

template chassis_template($SYSLOG_TAG) {
    mvar $message = "";
    mvar $quality_test = "PASS";

    /* CHASSIS ALARMS */

    var $query_chassis-alarms = { <command> "show chassis alarms"; }
    var $result_chassis-alarms = jcs:invoke($query_chassis-alarms);
    <alarm-information> {
        for-each($result_chassis-alarms/alarm-detail) {
            if (alarm-class == "Minor") {
                set $message = "CHASSIS:   **  WARN  ** : " _ alarm-class _" ALARM - " _ alarm-description;
                call send_message($SYSLOG_TAG, $message);
            }
            else if (alarm-class == "Major") {
                set $message = "CHASSIS:   *** FAIL *** : " _ alarm-class _" ALARM - " _ alarm-description;
                call send_message($SYSLOG_TAG, $message);
            }
            else {
                set $message = "CHASSIS:   !!! ERROR !! : Active alarm was not captured by script";
                call send_message($SYSLOG_TAG, $message);
            }
        }
        if ($result_chassis-alarms/alarm-summary/no-active-alarms) {
            set $message = "CHASSIS:   **  PASS  ** : There are no active chassis alarms";
            call send_message($SYSLOG_TAG, $message);
        }
    }

    /* CHASSIS HARDWARE STATUS */

    var $query_environment_information = { <get-environment-information>; }
    var $environment_information = jcs:invoke($query_environment_information);
    set $quality_test = "PASS";
    for-each ($environment_information/environment-item[status!="OK"]) {
        set $message = "CHASSIS:   *** FAIL *** : Component - " _ name _ " is " _ status;
        call send_message($SYSLOG_TAG, $message);
        if (comment) {
            set $message = "                          Details: " _ comment;
            call send_message($SYSLOG_TAG, $message);
        }
        if (temperature) {
            set $message = "                          Temperature: " _ temperature;
            call send_message($SYSLOG_TAG, $message);
        }
        set $quality_test = "FAIL";
    }
    if ($quality_test == "PASS") {
        set $message = "CHASSIS:   **  PASS  ** : Environment component checks are all OK";
        call send_message($SYSLOG_TAG, $message);
    }

    /* CHASSIS PIC INFORMATION */

    var $query_pic_information = { <get-pic-information>; }
    var $pic_information = jcs:invoke($query_pic_information);
    set $quality_test = "PASS";
    for-each ($pic_information/fpc) {
        if (state!="Online") {
            set $message = "CHASSIS:   *** FAIL *** : FPC - " _ slot _ " is " _ state;
            call send_message($SYSLOG_TAG, $message);
            set $quality_test = "FAIL";
        }
        for-each (/pic[pic-state!="Online"]) {
            set $message = "CHASSIS:   *** FAIL *** : PIC - " _ pic-slot _ " on FPC - " _ slot _ " is " _ state;
            call send_message($SYSLOG_TAG, $message);
            if (pic-type) {
                set $message = "                          Component: " _ description;
                call send_message($SYSLOG_TAG, $message);
            }
            set $quality_test = "FAIL";
        }
    }
    if ($quality_test == "PASS") {
        set $message = "CHASSIS:   **  PASS  ** : FPC and PIC status checks are all OK";
        call send_message($SYSLOG_TAG, $message);
    }
}

template system_template($SYSLOG_TAG) {
    mvar $message = "";
    mvar $quality_test = "PASS";

    /* SYSTEM ALARMS */

    var $query_system_alarms = { <command> "show system alarms"; }
    var $system_alarms = jcs:invoke($query_system_alarms);
    <alarm-information> {
        for-each($system_alarms/alarm-detail) {
            if (alarm-class == "Minor") {
                set $message = "SYSTEM:    **  WARN  ** : " _ alarm-class _" ALARM - " _ alarm-description;
                call send_message($SYSLOG_TAG, $message);
            }
            else if (alarm-class == "Major") {
                set $message = "SYSTEM:    *** FAIL *** : " _ alarm-class _" ALARM - " _ alarm-description;
                call send_message($SYSLOG_TAG, $message);
            }
            else {
                set $message = "SYSTEM:    !!! ERROR !! : Active alarm was not captured by script";
                call send_message($SYSLOG_TAG, $message);
            }
        }
        if ($system_alarms/alarm-summary/no-active-alarms) {
            set $message = "SYSTEM:    **  PASS  ** : There are no active system alarms";
            call send_message($SYSLOG_TAG, $message);
        }
    }

    /* SYSTEM UPTIME AND USERS */

    var $query_system_users = { <command> "show system users"; }
    var $system_users = jcs:invoke($query_system_users);
    if ($system_users/multi-routing-engine-item) {
        for-each ($system_users/multi-routing-engine-item) {
            set $message = "SYSTEM:    *   INFO   * : System (" _ re-name _ ") Uptime is " _ system-users-information/uptime-information/up-time;
            call send_message($SYSLOG_TAG, $message);
            for-each (./system-users-information/uptime-information/user-table/user-entry) {
                set $message = "SYSTEM:    *   INFO   * : " _ user _" is currently logged in from " _ from _" since " _ login-time;
                call send_message($SYSLOG_TAG, $message);
            }
        }
    }
    else {
        <system-users-information> {
            set $message = "SYSTEM:    *   INFO   * : System Uptime is " _$system_users/uptime-information/up-time;
            call send_message($SYSLOG_TAG, $message);
            for-each ($system_users/uptime-information/user-table/user-entry) {
                set $message = "SYSTEM:    *   INFO   * : " _ user _" is currently logged in from " _ from _" since " _ login-time;
                call send_message($SYSLOG_TAG, $message);
            }
        }
    }

    /* SYSTEM LAST COMMIT */

    var $query_system_commits = { <command> "show system commit"; }
    var $system_commits = jcs:invoke($query_system_commits);
    <commit-information> {
        set $message = "SYSTEM:    *   INFO   * : Last commit was " _$system_commits/commit-history/date-time _" by: " _$system_commits/commit-history/user;
        call send_message($SYSLOG_TAG, $message);
    }

    /* SYSTEM VERSION */

    var $query_software_information = { <get-software-information> {<detail>;}; }
    var $software_information = jcs:invoke($query_software_information);
    mvar $current-version-number = "";
    mvar $target-version-number = "";

    /** GET CURRENT VERSION **/

    if ($software_information/multi-routing-engine-item) {
        for-each ($software_information/multi-routing-engine-item) {
            for-each (//version-information[component= "RPD"]) {
                set $current-version-number = release;
            }
            set $message = "SYSTEM:    *   INFO   * : Device is a " _ //product-model _ " running " _ $current-version-number;
            call send_message($SYSLOG_TAG, $message);
        }
    }
    else {
        for-each ($software_information//version-information[component= "RPD"]) {
            set $current-version-number = release;
        }
        set $message = "SYSTEM:    *   INFO   * : Device is a " _ $product _ " running " _ $current-version-number;
        call send_message($SYSLOG_TAG, $message);
    }

    /** GET TARGET VERSION **/

    for-each ($TARGET-VERSIONS/device) {
        if ( starts-with($product, model-name )) {
            set $target-version-number = target-version;
        }
    }

    /** COMPARE CURRENT VERSION TO TARGET VERSION **/

    if( $target-version-number == "" ) {
        set $message = "SYSTEM:    !!! ERROR !! : No target version defined!";
        call send_message($SYSLOG_TAG, $message);
    }
    else if( $current-version-number != $target-version-number ) {
        set $message = "SYSTEM:    *** FAIL *** : Device " _ $product _ " is not running target Version of Junos, (" _ $target-version-number _ ")";
        call send_message($SYSLOG_TAG, $message);
    }
    else if( $current-version-number == $target-version-number ) {
        set $message = "SYSTEM:    **  PASS  ** : Device is running the target software release";
        call send_message($SYSLOG_TAG, $message);
    }

    /* ROUTING-ENGINE-STATUS */

    var $query_re_information = { <get-route-engine-information>; }
    var $route_engine_information = jcs:invoke($query_re_information);

    for-each ($route_engine_information/route-engine) {
        if ((mastership-state!="master") && (mastership-state!="backup")) {
            set $message = "SYSTEM:    *** FAIL *** : RE" _ slot _ " is not OK";
            call send_message($SYSLOG_TAG, $message);
        }
        if ((slot=="0") && (status=="OK")) {
            set $message = "SYSTEM:    *   INFO   * : RE0 is " _ status _ " and " _ mastership-state;
            call send_message($SYSLOG_TAG, $message);
        }
        if ((slot=="1") && (status=="OK")) {
            set $message = "SYSTEM:    *   INFO   * : RE1 is " _ status _ " and " _ mastership-state;
            call send_message($SYSLOG_TAG, $message);
        }
        if ((!slot) && (status=="OK")) {
            set $message = "SYSTEM:    **  PASS  ** : Routing Engine is " _ status;
            call send_message($SYSLOG_TAG, $message);
        }
        if (cpu-temperature>="65") {
            set $message = "SYSTEM:    **  WARN  ** : System temperature high!!! ("_ cpu-temperature _").";
            call send_message($SYSLOG_TAG, $message);
        } else {
            set $message = "SYSTEM:    **  PASS  ** : System temperature is normal!";
            call send_message($SYSLOG_TAG, $message);
        }
        if ((cpu-idle<="50") || (load-average-fifteen>=0.75)) {
            set $message = "SYSTEM:    **  WARN  ** : System load is high!!! (User: "_ cpu-user _"% System: "_ cpu-system _"% Background: "_ cpu-background _"%)";
            call send_message($SYSLOG_TAG, $message);
        }
    }

    /* SYSTEM STORAGE CHECK */

    var $query_system_storage = { <command> "show system storage"; }
    var $system_storage_information = jcs:invoke($query_system_storage);
    var $filesystem_regex = "\/dev\/(gpt\/junos|(da|bo)0s([12]a|3[ef]))";
    set $quality_test = "PASS";
    if ($system_storage_information/multi-routing-engine-item) {
        for-each ($system_storage_information/multi-routing-engine-item) {
            for-each (./system-storage-information/filesystem[filesystem-name=='/dev/gpt/junos']) {
                if (./used-percent >= 90) {
                    set $message = "SYSTEM:    *** FAIL *** : Disk Partition " _ mounted-on _ " on " _ ../../re-name _" is currently at " _ used-percent _ "% used space.";
                    call send_message($SYSLOG_TAG, $message);
                    set $quality_test = "FAIL";
                }
                else if (./used-percent >= 75) {
                    set $message = "SYSTEM:    **  WARN  ** : Disk Partition " _ mounted-on _ " on " _ ../../re-name _" is currently at " _ used-percent _ "% used space.";
                    call send_message($SYSLOG_TAG, $message);
                    set $quality_test = "WARN";
                }
            }
        }
    }
    else {
        <system-storage-information> {
            for-each ($system_storage_information/filesystem[filesystem-name==jcs:regex($filesystem_regex,filesystem-name)]) {
                if (./used-percent >= 90) {
                    set $message = "SYSTEM:    *** FAIL *** : Disk Partition " _ mounted-on _ " is currently at " _ used-percent _ "% used space.";
                    call send_message($SYSLOG_TAG, $message);
                    set $quality_test = "FAIL";
                }
                else if (./used-percent >= 75) {
                    set $message = "SYSTEM:    **  WARN  ** : Disk Partition " _ mounted-on _ " is currently at " _ used-percent _ "% used space.";
                    call send_message($SYSLOG_TAG, $message);
                    set $quality_test = "WARN";
                }
            }
        }
    }
    if ($quality_test=="PASS") {
        set $message = "SYSTEM:    *   PASS   * : All tested disk partitions are below 75% Used.";
        call send_message($SYSLOG_TAG, $message);
    }

    /* LICENSE CHECK */

    var $query_license_summary = {
        <get-license-summary-information>;
    }
    var $license_summary = jcs:invoke($query_license_summary);
    for-each ($license_summary/license-usage-summary/feature-summary) {
        if (validity-type=="invalid") {
            set $message = "SYSTEM:    *** FAIL *** : The feature license " _ name _ " is " _ validity-type;
            call send_message($SYSLOG_TAG, $message);
        }
        if (used-licensed>licensed) {
            set $message = "SYSTEM:    *** FAIL *** : The feature license " _ name _ " is oversubscribed!";
            call send_message($SYSLOG_TAG, $message);
        }
    }
}

template ospf_template($SYSLOG_TAG, $configuration) {
    mvar $message = "";

    /* OSPF-CONFIG-CHECK */

    if (!$configuration/protocols/ospf) {
        set $message = "OSPF:      *   INFO   * : OSPF is not configured";
        call send_message($SYSLOG_TAG, $message);
    }
    else {
        /* OSPF-NEIGHBORS-UP-COUNT */

        var $query_ospf_neighbours = {
            <get-ospf-neighbor-information>;
        }
        var $ospf_neighbours = jcs:invoke($query_ospf_neighbours);
        var $ospf_neighbour_count = count($ospf_neighbours/ospf-neighbor[ospf-neighbor-state=="Full"]) + count($ospf_neighbours/ospf-neighbor[ospf-neighbor-state=="2Way"]);
        mvar $msg_sev = "*   INFO   *";
        if ($ospf_neighbour_count == "0") { set $msg_sev = "**  WARN  **"; }
        set $message = "OSPF:      "_$msg_sev _" : There are "_$ospf_neighbour_count _ " OSPF neighbor sessions UP";
        call send_message($SYSLOG_TAG, $message);

        /* OSPF-NEIGHBOR-DOWN-IDENTIFICATION */

        for-each($ospf_neighbours/ospf-neighbor) {
            if ((ospf-neighbor-state=="Exchange") || (ospf-neighbor-state=="ExStart")) {
                set $message = "OSPF:      **  WARN  ** : Neighbour, "_ neighbor-address _" on "_ interface-name _ " has stalled, may be MTU issue";
                call send_message($SYSLOG_TAG, $message);
            }
        }

        var $query_ospf_interfaces = { <command> "show ospf interface detail"; }
        var $ospf_interfaces = jcs:invoke($query_ospf_interfaces);
        <ospf-interface-information> {
            for-each($ospf_interfaces/ospf-interface) {
                if (ospf-interface-state=="Down") {
                    set $message = "OSPF:      *** FAIL *** : OSPF member interface, " _ interface-name _" is DOWN";
                    call send_message($SYSLOG_TAG, $message);
                }
                if ((neighbor-count=="0") && (interface-name!="lo0.0") && (!ospf-interface-topology/ospf-topology-passive)) {
                    set $message = "OSPF:      **  WARN  ** : Interface " _ interface-name _" has no OSPF sessions";
                    call send_message($SYSLOG_TAG, $message);
                }
            }
        }
    }
}

template mpls_template($SYSLOG_TAG, $configuration) {
    mvar $message = "";

    /* MPLS-CHECK */
    if (!$configuration/protocols/mpls) {
        set $message = "MPLS:      *   INFO   * : MPLS is not configured";
        call send_message($SYSLOG_TAG, $message);
    }
    else {        
        var $query_mpls_int_information = {
            <get-mpls-interface-information>;
        }
        var $mpls_int_information = jcs:invoke($query_mpls_int_information);
        
        /* MPLS-INTERFACE-UP-COUNT */

        var $mpls_int_count = count($mpls_int_information/mpls-interface[mpls-interface-state="Up"]);
        mvar $msg_sev = "*   INFO   *";
        if ($mpls_int_count == "0") { set $msg_sev = "**  WARN  **"; }
        set $message = "MPLS:      "_$msg_sev _" : There are "_$mpls_int_count _ " MPLS interfaces UP";
        call send_message($SYSLOG_TAG, $message);

        /* MPLS-INTERFACES-DOWN */

        for-each ($mpls_int_information/mpls-interface[mpls-interface-state!="Up"]) {
            set $message = "MPLS:      *** FAIL *** : Interface "_ interface-name _ " is " _ mpls-interface-state;
            call send_message($SYSLOG_TAG, $message);
        }

        call ldp_template($SYSLOG_TAG, $configuration);
        
        call rsvp_template($SYSLOG_TAG, $configuration);
    }
}

template ldp_template($SYSLOG_TAG, $configuration) {
    mvar $message = "";

    /* LDP-CHECK */

    if (!$configuration/protocols/ldp) {
        set $message = "LDP:       *   INFO   * : LDP is not configured";
        call send_message($SYSLOG_TAG, $message);
    }
    else { 
        var $query_ldp_int_information = {
            <get-ldp-interface-information>;
        }
        var $ldp_int_information = jcs:invoke($query_ldp_int_information);

        /* LDP-NEIGHBORS-UP-COUNT */
    
        var $ldp_int_count = count($ldp_int_information/ldp-interface[ldp-neighbor-count=="1"]);
        mvar $msg_sev = "*   INFO   *";
        if ($ldp_int_count == "0") { set $msg_sev = "**  WARN  **"; }
        set $message = "LDP:       "_$msg_sev _" : There are " _$ldp_int_count _ " LDP neighbor interfaces UP (inc lo0.0)"; 
        call send_message($SYSLOG_TAG, $message);

        /* LDP-SESSION-UP-COUNT */

        var $query_ldp_sessions = {
            <get-ldp-session-information>;
        }
        var $ldp_sessions = jcs:invoke($query_ldp_sessions);
        var $ldp_session_count = count($ldp_sessions/ldp-session[ldp-session-state=="Operational"]);
        set $msg_sev = "*   INFO   *";
        if ($ldp_session_count == "0") { set $msg_sev = "**  WARN  **"; }
        set $message = "LDP:       "_$msg_sev _" : There are "_$ldp_session_count _ " neighbor sessions UP";
        call send_message($SYSLOG_TAG, $message);

        /* LDP-NEIGHBOR-DOWN-IDENTIFICATION */

        for-each($ldp_int_information/ldp-interface) {
            if (ldp-neighbor-count=="0") {
                set $message = "LDP:       *** FAIL *** : Interface " _ interface-name _" has zero neighbors";
                call send_message($SYSLOG_TAG, $message);
            }
        }
    }
}

template rsvp_template($SYSLOG_TAG, $configuration) {
    mvar $message = "";

    /* RSVP-CHECK- */

    if (!$configuration/protocols/rsvp) {
        set $message = "RSVP:      *   INFO   * : RSVP is not configured";
        call send_message($SYSLOG_TAG, $message);
    }
    else{
        var $query_rsvp_int_information = {
            <get-rsvp-interface-information>;
        }
        var $rsvp_int_information = jcs:invoke($query_rsvp_int_information);
    
        /* RSVP-NEIGHBORS-UP-COUNT */

        var $rsvp_int_count = count($rsvp_int_information/rsvp-interface[rsvp-status="Up"]);
        mvar $msg_sev = "*   INFO   *";
        if ($rsvp_int_count == "0") { set $msg_sev = "**  WARN  **"; }
        set $message = "RSVP:      "_$msg_sev _" : There are "_$rsvp_int_count _ " RSVP interfaces UP";
        call send_message($SYSLOG_TAG, $message);

        /* RSVP-LSP's */

        var $query_mpls_lsps = {
            <get-mpls-lsp-information>;
        }
        var $mpls_lsps = jcs:invoke($query_mpls_lsps);
        for-each ($mpls_lsps/rsvp-session-data[session-type=="Ingress"]) {
            set $message = "RSVP:      *   INFO   * : There are " _ count _ " Egress-LSPs Operational";
            call send_message($SYSLOG_TAG, $message);
        }
        for-each ($mpls_lsps/rsvp-session-data[session-type=="Egress"]) {
            set $message = "RSVP:      *   INFO   * : There are " _ count _ " Ingress-LSPs Operational";
            call send_message($SYSLOG_TAG, $message);
        }

        /* RSVP-NEIGHBOR-DOWN-IDENTIFICATION */

        for-each($rsvp_int_information/rsvp-interface) {
            if ((rsvp-status=="Down") && (interface-name!="lo0.0")) {
                set $message = "RSVP:      *** FAIL *** : Neighbor session configured on " _ interface-name _" is DOWN";
                call send_message($SYSLOG_TAG, $message);
            }
        }
    }
}

template bgp_template($SYSLOG_TAG, $configuration) {
    mvar $message = "";

    /* BGP-CHECK */

    if (!$configuration/protocols/bgp) {
        set $message = "BGP:       *   INFO   * : BGP is not configured";
        call send_message($SYSLOG_TAG, $message);
    }
    else {
        var $query_bgp_summary = {
            <get-bgp-summary-information>;
        }
        var $bgp_summary = jcs:invoke($query_bgp_summary);
        
        /* BGP-NEIGHBORS-UP-COUNT */

        var $bgp_peer_count = count($bgp_summary/bgp-peer[peer-state=="Established"]);
        mvar $msg_sev = "*   INFO   *";
        if ($bgp_peer_count == "0") { set $msg_sev = "**  WARN  **"; }
        set $message = "BGP:       "_$msg_sev _" : There are "_$bgp_peer_count _ " BGP neighbor sessions UP";
        call send_message($SYSLOG_TAG, $message);

        /* BGP-NEIGHBOR-DOWN-IDENTIFICATION */

        for-each($bgp_summary/bgp-peer[peer-state!="Established"]) {
            set $message = "BGP:       *** FAIL *** : Peer " _ description _" @ " _ peer-address _" is DOWN";
            call send_message($SYSLOG_TAG, $message);
        }
    }
}

template vpn_template($SYSLOG_TAG) {
    mvar $message = "";

    /* VPN-TUNNEL-UP-COUNT */

    var $query_security_assoc = {
        <get-security-associations-information>;
    }
    var $security_assoc = jcs:invoke($query_security_assoc);
    <ipsec-security-associations-information> {
        if($security_assoc/total-active-tunnels != 0) {
            set $message = "VPN:       *   INFO   * : There are "_ total-active-tunnels _ " VPN tunnels UP";
            call send_message($SYSLOG_TAG, $message);
        }
    }

    /* VPN-TUNNEL-DOWN-IDENTIFICATION */

    var $query_inactive_tunnels = {
        <get-inactive-tunnels>;
    }
    var $query_inactive_tunnel_details = {
        <get-inactive-tunnels> {
            <detail>;
        }
    }
    var $inactive_tunnels = jcs:invoke($query_inactive_tunnels);
    var $inactive_tunnel_details = jcs:invoke($query_inactive_tunnel_details);
    <ipsec-unestablished-tunnel-information> {
        if($inactive_tunnels/total-inactive-tunnels != 0) {
            for-each($inactive_tunnel_details/ipsec-security-associations-block) {
                set $message = "VPN:       *** FAIL *** : Tunnel " _ sa-vpn-name _" @ " _ sa-remote-gateway _" is DOWN";
                call send_message($SYSLOG_TAG, $message);
                set $message = "                          Reason: " _ sa-ipsec-tunnel-events/sa-tunnel-event;
                call send_message($SYSLOG_TAG, $message);
            }
        }
    }
    if ($message == "") { 
        set $message = "VPN:       *   INFO   * : There are no VPN tunnels Detected";
        call send_message($SYSLOG_TAG, $message);
    }
}

template interface_template($SYSLOG_TAG, $configuration) {
    mvar $message = "";
    mvar $quality_test = "PASS";

    /* CONFIGURED INTERFACES IN UP/DOWN STATE */

    for-each($configuration/interfaces/interface) {
        var $interface_name = name;
        var $query_interface_information = {
            <get-interface-information> {
                <terse>;
                if ($interface_name) {
                    <interface-name> $interface_name;
                }
            }
        }
        var $interface_information = jcs:invoke($query_interface_information);
        <interface-information> {
            for-each ($interface_information/physical-interface/logical-interface) {
                if ((admin-status=="up") && (oper-status=="down")) {
                    set $message = "INTERFACE: *** FAIL *** : Configured interface " _ name _" is Admin Up but Operationally DOWN";
                    call send_message($SYSLOG_TAG, $message);
                    set $quality_test = "FAIL";
                }
            }
        }
    }
    if ($quality_test=="PASS") {
        set $message = "INTERFACE: *   PASS   * : All Configured interfaces appear to be UP";
        call send_message($SYSLOG_TAG, $message);
    }
}

/******************** END OF TEMPLATE *********************/

/* ---------------------------------------- */
/* this function is used get serial number  */
/* ---------------------------------------- */
<func:function name="ztp:serial-number">
{
    param $jnx;

    var $cmd = <get-chassis-inventory>;
    var $sn = jcs:execute( $jnx, $cmd )//chassis/serial-number;

    <func:result select="$sn">;
}

/* ------------------------------------------------------------------ */
/* this function is used to send a custom message to syslog and stout */
/* ------------------------------------------------------------------ */
template send_message($SYSLOG_TAG, $message)
{
    <output> $message;
    expr jcs:syslog( $SYSLOG, $SYSLOG_TAG, $message );
}
